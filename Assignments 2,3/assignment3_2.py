dust = int(input()) # 입출력 요구사항에 따라 사용자에게 가이드 문자열을 제시하지 않음
 
if 0 <= dust and dust <= 15:
    print('좋음')
elif dust <= 35:
    print('보통')
elif dust <= 75:
    print('나쁨')
else:
    print('매우 나쁨') 


# dust를 순방향(좋음, 보통, 나쁨, 매우 나쁨) 혹은 역방향으로 평가하는 것이 여러 개발자가 보고 이해하기 좋은 코드이다.


# 개발자가 보고 이해하기 좋은 코드도 중요하지만, 미세먼지 판별기를 미세먼지 농도가 일정한 국가에서 구동해야 한다면 조건식의 구현 순서를 바꾸는 것이 좋다.
# 예를 들어, 1년 중 360일 동안 미세먼지 농도 300을 기록하는 국가에서는, '매우 나쁨' 여부를 가장 먼저 평가해야 보다 효율적인 코드가 된다.
# 또 다른 예를 들어, 1년 중 360일 동안 미세먼지 농도 30을 기록하는 국가에서는 '보통' 여부를 가장 먼저 평가해야만 보다 효율적인 코드가 된다.


# 최다 오답 사례: '매우 나쁨' 대신 '매우나쁨'을 출력하는 프로그램을 구현하였음. 
# 고작 한 글자 차이라고 생각할 수도 있지만, 상용 프로그램을 구현하는 데 있어 한 글자의 차이가 치명적 결과로 이어질 수 있다.
# 사례> 띄어쓰기 한두글자를 생략하거나 더하는 소소한 오류(program bug)가 내포된 워드프로세서 혹은 영상편집 프로그램을 개발하는 경우, 이를 납득할 만한 소비자는?
# 사례> 학점산출기를 개발하면서 'A+'를 'A'로 출력하거나 'A+'를 'B+'로 출력하는 경우의 소비자?
# 사례> '합격' vs '불합격'
# 사례> 4주차의 별찍기 과제
